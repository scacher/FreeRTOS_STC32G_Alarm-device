C251 COMPILER V5.60.0,  pwmb                                                               19/06/23  15:27:13  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE pwmb
OBJECT MODULE PLACED IN .\Objects\pwmb.obj
COMPILER INVOKED BY: D:\Keil_v5\C251\BIN\C251.EXE Sources\Task\src\pwmb.c XSMALL FUNCTIONS(REENTRANT) OPTIMIZE(4,SPEED) 
                    -BROWSE INCDIR(.\Sources\User;.\Sources\User\include;.\Sources\FreeRTOS\include;.\Sources\FreeRTOS\portable\STC32G12K128;
                    -.\Sources\Driver\inc;.\Sources\Task\inc) DEBUG PRINT(.\Listings\pwmb.lst) TABS(2) OBJECT(.\Objects\pwmb.obj) 

stmt  level    source

    1          /*---------------------------------------------------------------------*/
    2          /* --- STC MCU Limited ------------------------------------------------*/
    3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
    4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
    5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
    6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
    7          /* --- Web: www.STCMCU.com --------------------------------------------*/
    8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
    9          /* --- QQ:  800003751 -------------------------------------------------*/
   10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
   11          /*---------------------------------------------------------------------*/
   12          
   13          
   14          /*************  功能说明    **************
   15          
   16          本例程基于STC32G为主控芯片的实验箱9进行编写测试.
   17          
   18          高级PWMB定时器 PWM5,PWM6,PWM7,PWM8 每个通道都可独立实现PWM输出.
   19          
   20          4个通道PWM根据需要设置对应输出口，可通过示波器观察输出呼吸灯效果的脉冲信号.
   21          
   22          PWM周期和占空比可以自定义设置，最高可达65535.
   23          
   24          ******************************************/
   25          
   26          #include "FreeRTOS.h"
   27          #include "task.h"
   28          #include "STC32G_PWM.h"
   29          #include "STC32G_NVIC.h"
   30          #include "pwmb.h"
   31          
   32          #define PWMA_PERIOD     2047
   33          #define PWMB_PERIOD     2047  //定义PWM周期
   34          
   35          PWMx_Duty PWMB_Duty;
   36          PWMx_Duty PWMA_Duty;
   37          
   38          bit PWM1_Flag;
   39          bit PWM5_Flag;
   40          bit PWM6_Flag;
   41          bit PWM7_Flag;
   42          bit PWM8_Flag;
   43          
   44          void PWMB_Output_init(void);
   45          
   46          /* PWMB任务函数 */
   47          portTASK_FUNCTION( vPWMB_LedTask, pvParameters )
   48          {
   49   1          UNUSED( pvParameters );
   50   1      
   51   1        PWMB_Output_init();
   52   1      
   53   1          while(1)
   54   1          {
   55   2              if(!PWM5_Flag)
   56   2              {
   57   3                  PWMA_Duty.PWM1_Duty++;
C251 COMPILER V5.60.0,  pwmb                                                               19/06/23  15:27:13  PAGE 2   

   58   3                  if(PWMA_Duty.PWM1_Duty >= PWMA_PERIOD) PWM1_Flag = 1;
   59   3              }
   60   2              else
   61   2              {
   62   3                  PWMA_Duty.PWM1_Duty--;
   63   3                  if(PWMA_Duty.PWM1_Duty <= 0) PWM1_Flag = 0;
   64   3              }
   65   2              if(!PWM5_Flag)
   66   2              {
   67   3                  PWMB_Duty.PWM5_Duty++;
   68   3                  if(PWMB_Duty.PWM5_Duty >= PWMB_PERIOD) PWM5_Flag = 1;
   69   3              }
   70   2              else
   71   2              {
   72   3                  PWMB_Duty.PWM5_Duty--;
   73   3                  if(PWMB_Duty.PWM5_Duty <= 0) PWM5_Flag = 0;
   74   3              }
   75   2      
   76   2              if(!PWM6_Flag)
   77   2              {
   78   3                  PWMB_Duty.PWM6_Duty++;
   79   3                  if(PWMB_Duty.PWM6_Duty >= PWMB_PERIOD) PWM6_Flag = 1;
   80   3              }
   81   2              else
   82   2              {
   83   3                  PWMB_Duty.PWM6_Duty--;
   84   3                  if(PWMB_Duty.PWM6_Duty <= 0) PWM6_Flag = 0;
   85   3              }
   86   2      
   87   2              if(!PWM7_Flag)
   88   2              {
   89   3                  PWMB_Duty.PWM7_Duty++;
   90   3                  if(PWMB_Duty.PWM7_Duty >= PWMB_PERIOD) PWM7_Flag = 1;
   91   3              }
   92   2              else
   93   2              {
   94   3                  PWMB_Duty.PWM7_Duty--;
   95   3                  if(PWMB_Duty.PWM7_Duty <= 0) PWM7_Flag = 0;
   96   3              }
   97   2      
   98   2              if(!PWM8_Flag)
   99   2              {
  100   3                  PWMB_Duty.PWM8_Duty++;
  101   3                  if(PWMB_Duty.PWM8_Duty >= PWMB_PERIOD) PWM8_Flag = 1;
  102   3              }
  103   2              else
  104   2              {
  105   3                  PWMB_Duty.PWM8_Duty--;
  106   3                  if(PWMB_Duty.PWM8_Duty <= 0) PWM8_Flag = 0;
  107   3              }
  108   2              
  109   2              UpdatePwm(PWMB, &PWMB_Duty);
  110   2              
  111   2              vTaskDelay(1);
  112   2          }
  113   1          
  114   1          vTaskDelete(NULL);
  115   1      }   
  116          
  117          //========================================================================
  118          // 函数: PWMB_Output_init
  119          // 描述: 用户初始化程序.
  120          // 参数: None.
  121          // 返回: None.
  122          // 版本: V1.0, 2020-09-28
  123          //========================================================================
C251 COMPILER V5.60.0,  pwmb                                                               19/06/23  15:27:13  PAGE 3   

  124          void PWMB_Output_init(void)
  125          {
  126   1        PWMx_InitDefine   PWMx_InitStructure;
  127   1        
  128   1        PWMA_Duty.PWM1_Duty = 128;
  129   1        PWMB_Duty.PWM5_Duty = 128;
  130   1        PWMB_Duty.PWM6_Duty = 256;
  131   1        PWMB_Duty.PWM7_Duty = 512;
  132   1        PWMB_Duty.PWM8_Duty = 1024;
  133   1      
  134   1        PWMx_InitStructure.PWM_Mode    =  CCMRn_PWM_MODE1;  //模式,   CCMRn_FREEZE,CCMRn_MATCH_VALID,CCMRn_MATCH_IN
             -VALID,CCMRn_ROLLOVER,CCMRn_FORCE_INVALID,CCMRn_FORCE_VALID,CCMRn_PWM_MODE1,CCMRn_PWM_MODE2
  135   1        PWMx_InitStructure.PWM_Duty    = PWMA_Duty.PWM1_Duty; //PWM占空比时间, 0~Period
  136   1        PWMx_InitStructure.PWM_EnoSelect   = ENO1P;       //输出通道选择, ENO1P,ENO1N,ENO2P,ENO2N,ENO3P,ENO3N,ENO4P
             -,ENO4N / ENO5P,ENO6P,ENO7P,ENO8P
  137   1        PWM_Configuration(PWM1, &PWMx_InitStructure);     //初始化PWM,  PWMA,PWMB
  138   1        
  139   1        PWMx_InitStructure.PWM_Mode    =  CCMRn_PWM_MODE1;  //模式,   CCMRn_FREEZE,CCMRn_MATCH_VALID,CCMRn_MATCH_IN
             -VALID,CCMRn_ROLLOVER,CCMRn_FORCE_INVALID,CCMRn_FORCE_VALID,CCMRn_PWM_MODE1,CCMRn_PWM_MODE2
  140   1        PWMx_InitStructure.PWM_Duty    = PWMB_Duty.PWM5_Duty; //PWM占空比时间, 0~Period
  141   1        PWMx_InitStructure.PWM_EnoSelect   = ENO5P;       //输出通道选择, ENO1P,ENO1N,ENO2P,ENO2N,ENO3P,ENO3N,ENO4P
             -,ENO4N / ENO5P,ENO6P,ENO7P,ENO8P
  142   1        PWM_Configuration(PWM5, &PWMx_InitStructure);     //初始化PWM,  PWMA,PWMB
  143   1      
  144   1        PWMx_InitStructure.PWM_Mode    =  CCMRn_PWM_MODE1;  //模式,   CCMRn_FREEZE,CCMRn_MATCH_VALID,CCMRn_MATCH_IN
             -VALID,CCMRn_ROLLOVER,CCMRn_FORCE_INVALID,CCMRn_FORCE_VALID,CCMRn_PWM_MODE1,CCMRn_PWM_MODE2
  145   1        PWMx_InitStructure.PWM_Duty    = PWMB_Duty.PWM6_Duty; //PWM占空比时间, 0~Period
  146   1        PWMx_InitStructure.PWM_EnoSelect   = ENO6P;       //输出通道选择, ENO1P,ENO1N,ENO2P,ENO2N,ENO3P,ENO3N,ENO4P
             -,ENO4N / ENO5P,ENO6P,ENO7P,ENO8P
  147   1        PWM_Configuration(PWM6, &PWMx_InitStructure);     //初始化PWM,  PWMA,PWMB
  148   1      
  149   1        PWMx_InitStructure.PWM_Mode    =  CCMRn_PWM_MODE1;  //模式,   CCMRn_FREEZE,CCMRn_MATCH_VALID,CCMRn_MATCH_IN
             -VALID,CCMRn_ROLLOVER,CCMRn_FORCE_INVALID,CCMRn_FORCE_VALID,CCMRn_PWM_MODE1,CCMRn_PWM_MODE2
  150   1        PWMx_InitStructure.PWM_Duty    = PWMB_Duty.PWM7_Duty; //PWM占空比时间, 0~Period
  151   1        PWMx_InitStructure.PWM_EnoSelect   = ENO7P;       //输出通道选择, ENO1P,ENO1N,ENO2P,ENO2N,ENO3P,ENO3N,ENO4P
             -,ENO4N / ENO5P,ENO6P,ENO7P,ENO8P
  152   1        PWM_Configuration(PWM7, &PWMx_InitStructure);     //初始化PWM,  PWMA,PWMB
  153   1      
  154   1        PWMx_InitStructure.PWM_Mode    =  CCMRn_PWM_MODE1;  //模式,   CCMRn_FREEZE,CCMRn_MATCH_VALID,CCMRn_MATCH_IN
             -VALID,CCMRn_ROLLOVER,CCMRn_FORCE_INVALID,CCMRn_FORCE_VALID,CCMRn_PWM_MODE1,CCMRn_PWM_MODE2
  155   1        PWMx_InitStructure.PWM_Duty    = PWMB_Duty.PWM8_Duty; //PWM占空比时间, 0~Period
  156   1        PWMx_InitStructure.PWM_EnoSelect   = ENO8P;       //输出通道选择, ENO1P,ENO1N,ENO2P,ENO2N,ENO3P,ENO3N,ENO4P
             -,ENO4N / ENO5P,ENO6P,ENO7P,ENO8P
  157   1        PWM_Configuration(PWM8, &PWMx_InitStructure);     //初始化PWM,  PWMA,PWMB
  158   1      
  159   1        PWMx_InitStructure.PWM_Period   = PWMB_PERIOD;      //周期时间,   0~65535
  160   1        PWMx_InitStructure.PWM_DeadTime = 0;          //死区发生器设置, 0~255
  161   1        PWMx_InitStructure.PWM_MainOutEnable= ENABLE;     //主输出使能, ENABLE,DISABLE
  162   1        PWMx_InitStructure.PWM_CEN_Enable   = ENABLE;     //使能计数器, ENABLE,DISABLE
  163   1        PWM_Configuration(PWMB, &PWMx_InitStructure);     //初始化PWM通用寄存器,  PWMA,PWMB
  164   1      
  165   1        PWM1_USE_P60P61();
  166   1        PWM5_USE_P20();
  167   1        PWM6_USE_P21();
  168   1        PWM7_USE_P22();
  169   1        PWM8_USE_P23();
  170   1      
  171   1        NVIC_PWM_Init(PWMB,DISABLE,Priority_0);
  172   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       529     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
C251 COMPILER V5.60.0,  pwmb                                                               19/06/23  15:27:13  PAGE 4   

  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        32     ------
  bit size             =         5     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
