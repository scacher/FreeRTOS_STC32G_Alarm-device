C251 COMPILER V5.60.0,  spi                                                                04/07/23  12:54:13  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE spi
OBJECT MODULE PLACED IN .\Objects\spi.obj
COMPILER INVOKED BY: D:\Keil_v5\C251\BIN\C251.EXE Sources\Task\src\spi.c XSMALL FUNCTIONS(REENTRANT) OPTIMIZE(4,SPEED) B
                    -ROWSE INCDIR(.\Sources\User;.\Sources\User\include;.\Sources\FreeRTOS\include;.\Sources\FreeRTOS\portable\STC32G12K128;.
                    -\Sources\Driver\inc;.\Sources\Task\inc) DEBUG PRINT(.\Listings\spi.lst) TABS(2) OBJECT(.\Objects\spi.obj) 

stmt  level    source

    1          #include "spi.h"
    2          
    3          //========================================================================
    4          // 函数名称: SPI_init
    5          // 函数功能: SPI初始化
    6          // 入口参数: 无
    7          // 函数返回: 无
    8          // 当前版本: VER1.0
    9          // 修改日期: 2023 - 6 - 7
   10          // 当前作者: ZCF
   11          // 其他备注: 这里SPI的引脚选择要通过P_SW1寄存器切换
   12          //========================================================================
   13          void SPI_init1(void)
   14          {
   15   1          P_SW1 = (P_SW1 & ~(3<<2)) | (1<<2);     //IO口切换. 0: P1.2/P5.4 P1.3 P1.4 P1.5, 1: P2.2 P2.3 P2.4 P2
             -.5, 2: P5.4 P4.0 P4.1 P4.3, 3: P3.5 P3.4 P3.3 P3.2
   16   1          SSIG = 1; //忽略 SS 引脚功能，使用 MSTR 确定器件是主机还是从机
   17   1          SPEN = 1; //使能 SPI 功能
   18   1          DORD = 0; //先发送/接收数据的高位（ MSB）
   19   1          MSTR = 1; //设置主机模式
   20   1          CPOL = 0; //SCLK 空闲时为低电平，SCLK 的前时钟沿为上升沿，后时钟沿为下降沿
   21   1          CPHA = 0; //数据 SS 管脚为低电平驱动第一位数据并在 SCLK 的后时钟沿改变数据
   22   1          SPCTL = (SPCTL & ~3) | 3;   //SPI 时钟频率选择, 0: 4T, 1: 8T,  2: 16T,  3: 2T
   23   1          
   24   1          SPI_SCK = 0;    // set clock to low initial state
   25   1          SPI_MOSI = 1;
   26   1          SPIF = 1;   //清SPIF标志
   27   1          WCOL = 1;   //清WCOL标志
   28   1      }
   29          
   30          
   31          //========================================================================
   32          // 函数名称: SPI_WriteByte
   33          // 函数功能: SPI写一个八位数据
   34          // 入口参数: 无
   35          // 函数返回: 无
   36          // 当前版本: VER1.0
   37          // 修改日期: 2023 - 6 - 7
   38          // 当前作者: ZCF
   39          // 其他备注: 
   40          //========================================================================
   41          void SPI_WriteByte1(u8 out)
   42          {
   43   1          SPDAT = out;
   44   1          while(SPIF == 0);
   45   1          SPIF = 1;   //清SPIF标志
   46   1          WCOL = 1;   //清WCOL标志
   47   1      }
   48          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =        64     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
C251 COMPILER V5.60.0,  spi                                                                04/07/23  12:54:13  PAGE 2   

  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
