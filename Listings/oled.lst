C251 COMPILER V5.60.0,  oled                                                               07/07/23  15:39:57  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE oled
OBJECT MODULE PLACED IN .\Objects\oled.obj
COMPILER INVOKED BY: D:\Keil_v5\C251\BIN\C251.EXE Sources\Task\src\oled.c XSMALL FUNCTIONS(REENTRANT) OPTIMIZE(4,SPEED) 
                    -BROWSE INCDIR(.\Sources\User;.\Sources\User\include;.\Sources\FreeRTOS\include;.\Sources\FreeRTOS\portable\STC32G12K128;
                    -.\Sources\Driver\inc;.\Sources\Task\inc) DEBUG PRINT(.\Listings\oled.lst) TABS(2) OBJECT(.\Objects\oled.obj) 

stmt  level    source

    1          #include "FreeRTOS.h"
    2          #include "task.h"
    3          
    4          #include "oled.h"
    5          #include "font.h"
    6          #include "stc.h"
    7          #include "spi.h"
    8          #include "string.h"
    9          #include "pic.h"
   10          #include "DS18B20.h"
   11          #include "Power_detection.h"
   12          #include "Infrared.h"
   13          #include "beep.h"
   14          #include "general.h"
   15          //#include "STC32G_SPI.h"
   16          
   17          #define  DELAY_TIME   2000
   18          #define normal_state 0
   19          #define alarm_state  1 //报警状态
   20          #define manage_state 2 //处理状态
   21          
   22          unsigned char xdata ShowBUFF[8][128];                           //OLED全局缓存
   23          
   24          
   25          portTASK_FUNCTION( vOLEDTask, pvParameters )
   26          {
   27   1        float i;
   28   1        float V;
   29   1        UNUSED( pvParameters );
   30   1        EA = 1;                             //开总中断
   31   1        OLED_Init();                        //OLED初始化
   32   1          while(1)
   33   1          {
   34   2            i=((temp % 1000) / 100*10)+((temp % 100) / 10)+(temp % 10)*0.1;
   35   2            V=(float)adcResult/819.0;
   36   2      //-----------------------------------------状态显示-----------------------------------------   
   37   2              OLED_BuffClear();                                                       //清除全部缓存
   38   2              OLED_BuffShowString(32,0,"状态显示",0);       //显示数据
   39   2              OLED_BuffShowString(0,2," ",1);
   40   2              OLED_BuffShowBigString(8,2,"这里是警告标识",1);                                       //显示数据
   41   2              OLED_BuffShowString(120,2," ",1);
   42   2              OLED_BuffShow68String(2,0,4,"Temperature=",0);
   43   2              OLED_BuffShow68Num02F(2,72,4,i,0);
   44   2              OLED_BuffShow68String(2,96,4,"C",0);
   45   2              OLED_BuffShow68String(1,0,4,"Voltage=",0);
   46   2              OLED_BuffShow68Num02F(1,48,4,V,0);                                         //显示数据
   47   2              OLED_BuffShow68String(1,66,4,"V",0);
   48   2              if(general_mode==alarm_state)
   49   2              {
   50   3                if(flag)
   51   3                {
   52   4                  OLED_BuffShowString(32,6,"电压异常",0);
   53   4                  beep_1hz();
   54   4                }
   55   3                if(flag1)
   56   3                {
   57   4                  OLED_BuffShowString(32,6,"有人经过\xfd",0);
C251 COMPILER V5.60.0,  oled                                                               07/07/23  15:39:57  PAGE 2   

   58   4                  beep_4hz();
   59   4        //          beep_output();
   60   4                }
   61   3                if(flag2)
   62   3                {
   63   4                  OLED_BuffShowString(32,6,"温度异常",0);
   64   4                  beep_8hz();
   65   4                }
   66   3              }
   67   2              OLED_BuffShow();                                                        //将缓存写入显示屏显示
   68   2              //vTaskDelay(DELAY_TIME/5);//delay_ms1(DELAY_TIME); 
   69   2              vTaskDelay(50);
   70   2          }
   71   1          
   72   1      }
   73          
   74          //========================================================================
   75          // 函数名称: delay
   76          // 函数功能: OLED驱动用的延时
   77          // 入口参数: 无
   78          // 函数返回: 无
   79          // 当前版本: VER1.0
   80          // 修改日期: 2023 - 6 - 7
   81          // 当前作者: ZCF
   82          // 其他备注:
   83          //========================================================================
   84          void delay(void)
   85          {
   86   1          int xdata i;
   87   1          
   88   1          for (i=0; i<100; i++);
   89   1      }
   90          
   91          //========================================================================
   92          // 函数名称: delay_ms1
   93          // 函数功能: ms延时函数
   94          // 入口参数: 无
   95          // 函数返回: 无
   96          // 当前版本: VER1.0
   97          // 修改日期: 2023 - 6 - 7
   98          // 当前作者: ZCF
   99          // 其他备注:
  100          //========================================================================
  101          void delay_ms1(u16 ms)
  102          {
  103   1           u16 xdata i;
  104   1           do{
  105   2                i = MAIN_Fosc1 / 6000;
  106   2                while(--i);   //6T per loop
  107   2           }while(--ms);
  108   1      }
  109          
  110          //========================================================================
  111          // 函数名称: OLED_WR_Byte
  112          // 函数功能: OLED地址/数据写入函数
  113          // 入口参数: @dat:数据    @cmd:命令
  114          // 函数返回: 无
  115          // 当前版本: VER1.0
  116          // 修改日期: 2023 - 6 - 7
  117          // 当前作者: ZCF
  118          // 其他备注:
  119          //========================================================================
  120          void OLED_WR_Byte(u8 dat,u8 cmd)
  121          {
  122   1          u8 udat[1] ;
  123   1          udat[0] = dat;
C251 COMPILER V5.60.0,  oled                                                               07/07/23  15:39:57  PAGE 3   

  124   1          if(cmd)
  125   1          {
  126   2              OLED_DC = 1;
  127   2          }
  128   1          else
  129   1          {
  130   2              OLED_DC = 0;
  131   2          }
  132   1          OLED_CS = 0;
  133   1          SPI_WriteByte1(dat);
  134   1          delay();
  135   1          OLED_CS = 1;
  136   1          OLED_DC = 1;
  137   1      }
  138          
  139          //========================================================================
  140          // 函数名称: OLED_Init
  141          // 函数功能: OLED初始化函数
  142          // 入口参数: 无
  143          // 函数返回: 无
  144          // 当前版本: VER1.0
  145          // 修改日期: 2023 - 6 - 7
  146          // 当前作者: ZCF
  147          // 其他备注:
  148          //========================================================================
  149          void OLED_Init(void)
  150          {
  151   1          SPI_init1();
  152   1          vTaskDelay(100);//vTaskDelay(100);
  153   1          OLED_REST = 1;
  154   1          vTaskDelay(200);//vTaskDelay(200);
  155   1          OLED_REST=0;//复位
  156   1          vTaskDelay(200);//vTaskDelay(200);
  157   1          OLED_REST = 1;
  158   1      
  159   1          OLED_WR_Byte(0xAE,OLED_CMD);//--turn off oled panel
  160   1          OLED_WR_Byte(0x00,OLED_CMD);//---set low column address
  161   1          OLED_WR_Byte(0x10,OLED_CMD);//---set high column address
  162   1          OLED_WR_Byte(0x40,OLED_CMD);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F
             -)
  163   1          OLED_WR_Byte(0x81,OLED_CMD);//--set contrast control register
  164   1          OLED_WR_Byte(0xCF,OLED_CMD);// Set SEG Output Current Brightness
  165   1          OLED_WR_Byte(0xA1,OLED_CMD);//--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
  166   1          OLED_WR_Byte(0xC8,OLED_CMD);//Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
  167   1          OLED_WR_Byte(0xA6,OLED_CMD);//--set normal display
  168   1          OLED_WR_Byte(0xA8,OLED_CMD);//--set multiplex ratio(1 to 64)
  169   1          OLED_WR_Byte(0x3f,OLED_CMD);//--1/64 duty
  170   1          OLED_WR_Byte(0xD3,OLED_CMD);//-set display offset Shift Mapping RAM Counter (0x00~0x3F)
  171   1          OLED_WR_Byte(0x00,OLED_CMD);//-not offset
  172   1          OLED_WR_Byte(0xd5,OLED_CMD);//--set display clock divide ratio/oscillator frequency
  173   1          OLED_WR_Byte(0x80,OLED_CMD);//--set divide ratio, Set Clock as 100 Frames/Sec
  174   1          OLED_WR_Byte(0xD9,OLED_CMD);//--set pre-charge period
  175   1          OLED_WR_Byte(0xF1,OLED_CMD);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
  176   1          OLED_WR_Byte(0xDA,OLED_CMD);//--set com pins hardware configuration
  177   1          OLED_WR_Byte(0x12,OLED_CMD);
  178   1          OLED_WR_Byte(0xDB,OLED_CMD);//--set vcomh
  179   1          OLED_WR_Byte(0x40,OLED_CMD);//Set VCOM Deselect Level
  180   1          OLED_WR_Byte(0x20,OLED_CMD);//-Set Page Addressing Mode (0x00/0x01/0x02)
  181   1          OLED_WR_Byte(0x00,OLED_CMD);//
  182   1          OLED_WR_Byte(0x8D,OLED_CMD);//--set Charge Pump enable/disable
  183   1          OLED_WR_Byte(0x14,OLED_CMD);//--set(0x10) disable
  184   1          OLED_WR_Byte(0xA4,OLED_CMD);// Disable Entire Display On (0xa4/0xa5)
  185   1          OLED_WR_Byte(0xA6,OLED_CMD);// Disable Inverse Display On (0xa6/a7) 
  186   1          OLED_WR_Byte(0xAF,OLED_CMD);
  187   1          
  188   1          OLED_DisplayOn();
C251 COMPILER V5.60.0,  oled                                                               07/07/23  15:39:57  PAGE 4   

  189   1      }
  190          
  191          
  192          //========================================================================
  193          // 函数名称: OLED_Set_Pos
  194          // 函数功能: OLED设置显示位置
  195          // 入口参数: @x:x坐标     @y:y坐标
  196          // 函数返回: 无
  197          // 当前版本: VER1.0
  198          // 修改日期: 2023 - 6 - 7
  199          // 当前作者: ZCF
  200          // 其他备注:
  201          //========================================================================
  202          void OLED_Set_Pos(unsigned char x, unsigned char y) 
  203          { 
  204   1        OLED_WR_Byte((u8)(0xb0+y),OLED_CMD);
  205   1        OLED_WR_Byte(((x&0xf0)>>4)|0x10,OLED_CMD);
  206   1        OLED_WR_Byte((x&0x0f)|0x01,OLED_CMD); 
  207   1      }   
  208          
  209          
  210          //========================================================================
  211          // 函数名称: OLED_DrawBMP
  212          // 函数功能: OLED显示图片
  213          // 入口参数: @x0:x起点  @y0:y起点    @x1:x终点   @y1:y终点  @BMP：显示数组
  214          // 函数返回: 无
  215          // 当前版本: VER1.0
  216          // 修改日期: 2023 - 6 - 7
  217          // 当前作者: ZCF
  218          // 其他备注:
  219          //========================================================================
  220          void OLED_DrawBMP(unsigned char x0, unsigned char y0,unsigned char x1, unsigned char y1,unsigned char BMP
             -[])
  221          {   
  222   1          unsigned int xdata j=0;
  223   1          unsigned char xdata x,y;
  224   1      
  225   1          for(y=y0;y<(y1+y0);y++)
  226   1          {
  227   2              OLED_Set_Pos(x0,y);
  228   2              for(x=0;x<x1;x++)
  229   2              {      
  230   3                  OLED_WR_Byte(BMP[j++],OLED_DATA);       
  231   3              }
  232   2          }
  233   1      } 
  234          
  235          //========================================================================
  236          // 函数名称: OLED_DisplayOn
  237          // 函数功能: OLED开显示
  238          // 入口参数: 无
  239          // 函数返回: 无
  240          // 当前版本: VER1.0
  241          // 修改日期: 2023 - 6 - 7
  242          // 当前作者: ZCF
  243          // 其他备注:
  244          //========================================================================
  245          void OLED_DisplayOn(void)     //开显示
  246          {
  247   1          OLED_WR_Byte(0x8D,OLED_CMD);//电荷泵使能
  248   1          OLED_WR_Byte(0x14,OLED_CMD);//开启电荷泵
  249   1          OLED_WR_Byte(0xAF,OLED_CMD);//点亮屏幕       
  250   1      }
  251            
  252          //========================================================================
  253          // 函数名称: OLED_DisplayOff
C251 COMPILER V5.60.0,  oled                                                               07/07/23  15:39:57  PAGE 5   

  254          // 函数功能: OLED关显示
  255          // 入口参数: 无
  256          // 函数返回: 无
  257          // 当前版本: VER1.0
  258          // 修改日期: 2023 - 6 - 7
  259          // 当前作者: ZCF
  260          // 其他备注:
  261          //========================================================================
  262          void OLED_DisplayOff(void)     //关显示
  263          {
  264   1          OLED_WR_Byte(0x8D,OLED_CMD);//电荷泵使能
  265   1          OLED_WR_Byte(0x10,OLED_CMD);//关闭电荷泵
  266   1          OLED_WR_Byte(0xAF,OLED_CMD);//关闭屏幕        
  267   1      }
  268          
  269          //========================================================================
  270          // 函数名称: OLED_LightSet
  271          // 函数功能: OLED亮度设置
  272          // 入口参数: @num： 0-255
  273          // 函数返回: 无
  274          // 当前版本: VER1.0
  275          // 修改日期: 2023 - 6 - 7
  276          // 当前作者: ZCF
  277          // 其他备注:
  278          //========================================================================
  279          void OLED_LightSet(unsigned char num)     //亮度设置
  280          {
  281   1          OLED_WR_Byte(0x81,OLED_CMD);//
  282   1          OLED_WR_Byte(num,OLED_CMD);//  
  283   1          OLED_WR_Byte(0xDB,OLED_CMD);//--set vcomh
  284   1          OLED_WR_Byte(0x20,OLED_CMD);//Set VCOM Deselect Level   
  285   1      }
  286          
  287          
  288          //========================================================================
  289          // 函数名称: OLED_BuffClear
  290          // 函数功能: OLED清空缓存
  291          // 入口参数: 无
  292          // 函数返回: 无
  293          // 当前版本: VER1.0
  294          // 修改日期: 2023 - 6 - 7
  295          // 当前作者: ZCF
  296          // 其他备注: 写入的是缓存，需要电调用OLED_BuffShow才能显示出来
  297          //========================================================================
  298          void OLED_BuffClear(void)     //清屏
  299          {
  300   1          memset(ShowBUFF,0,128*8);
  301   1      }
  302          
  303          //========================================================================
  304          // 函数名称: OLED_BuffShow
  305          // 函数功能: OLED刷新显示
  306          // 入口参数: 无
  307          // 函数返回: 无
  308          // 当前版本: VER1.0
  309          // 修改日期: 2023 - 6 - 7
  310          // 当前作者: ZCF
  311          // 其他备注:
  312          //========================================================================
  313          void OLED_BuffShow(void)     
  314          {
  315   1          u8 xdata i,n;
  316   1      
  317   1          for(i=0;i<8;i++)
  318   1          {
  319   2             OLED_WR_Byte(0xb0+i,OLED_CMD); //设置行起始地址
C251 COMPILER V5.60.0,  oled                                                               07/07/23  15:39:57  PAGE 6   

*** WARNING C188 IN LINE 319 OF Sources\Task\src\oled.c: 'parameter 1': value truncated
  320   2             OLED_WR_Byte(0x00,OLED_CMD);   //设置低列起始地址
  321   2             OLED_WR_Byte(0x10,OLED_CMD);   //设置高列起始地址
  322   2      
  323   2             for(n=0;n<128;n++)
  324   2               OLED_WR_Byte(ShowBUFF[i][n],OLED_DATA);
  325   2          }
  326   1      }
  327          
  328          //========================================================================
  329          // 函数名称: OLED_BuffShowPoint
  330          // 函数功能: OLED显示一个点
  331          // 入口参数: @x：x起点   @y:y起点
  332          // 函数返回: 无
  333          // 当前版本: VER1.0
  334          // 修改日期: 2023 - 6 - 7
  335          // 当前作者: ZCF
  336          // 其他备注: 写入的是缓存，需要电调用OLED_BuffShow才能显示出来
  337          //========================================================================
  338          void OLED_BuffShowPoint(unsigned char x,unsigned char y)     //OLED显示一个点
  339          {
  340   1          ShowBUFF[y/8][x] |= 1<<(y%8);
  341   1      }
  342          
  343          //========================================================================
  344          // 函数名称: OLED_BuffShowPoint
  345          // 函数功能: OLED显示一条线
  346          // 入口参数: @x1：x起点  @y1：y起点  @x2：x终点   @y2：y终点
  347          // 函数返回: 无
  348          // 当前版本: VER1.0
  349          // 修改日期: 2023 - 6 - 7
  350          // 当前作者: ZCF
  351          // 其他备注: 写入的是缓存，需要电调用OLED_BuffShow才能显示出来
  352          //========================================================================
  353          void OLED_BuffShowLine( unsigned char x1, unsigned char y1, unsigned char x2,unsigned char y2)
  354          {
  355   1          unsigned char x,y;
  356   1          if( x1>x2 )
  357   1          {
  358   2              x=x1;x1=x2;x2=x;
  359   2              y=y1;y1=y2;y2=y;
  360   2          }
  361   1          if(x1!=x2)
  362   1          {
  363   2              for( x = x1; x <= x2; x++ )
  364   2              {
  365   3                  if( y2>y1 )
  366   3                      OLED_BuffShowPoint(x, (unsigned char)(y1+(u16)(y2-y1)*(u16)x/(u16)(x2-x1)));
  367   3                  else
  368   3                      OLED_BuffShowPoint(x, (unsigned char)(y1-(u16)(y1-y2)*(u16)x/(u16)(x2-x1)));
  369   3              }        
  370   2          }
  371   1          else
  372   1          {
  373   2              if( y1>y2 )
  374   2              {
  375   3                  for( y = y2; y <= y1; y++ )
  376   3                     OLED_BuffShowPoint(x1, y); 
  377   3              }
  378   2              else
  379   2              {
  380   3                  for( y = y1; y <= y2; y++ )
  381   3                     OLED_BuffShowPoint(x1, y);             
  382   3              }
  383   2          }
  384   1      }
C251 COMPILER V5.60.0,  oled                                                               07/07/23  15:39:57  PAGE 7   

  385          
  386          //========================================================================
  387          // 函数名称: OLED_BuffShowRectangle
  388          // 函数功能: OLED显示一个矩形
  389          // 入口参数: @x1：x起点  @y1：y起点  @x2：x终点   @y2：y终点
  390          // 函数返回: 无
  391          // 当前版本: VER1.0
  392          // 修改日期: 2023 - 6 - 7
  393          // 当前作者: ZCF
  394          // 其他备注: 写入的是缓存，需要电调用OLED_BuffShow才能显示出来
  395          //========================================================================
  396          void OLED_BuffShowRectangle(u8 x1, u8 y1, u8 x2, u8 y2)
  397          {
  398   1          OLED_BuffShowLine(x1, y1, x2, y1);
  399   1          OLED_BuffShowLine(x1, y1, x1, y2);
  400   1          OLED_BuffShowLine(x1, y2, x2, y2);
  401   1          OLED_BuffShowLine(x2, y1, x2, y2);
  402   1      }
  403          
  404          //========================================================================
  405          // 函数名称: OLED_BuffShowCircle
  406          // 函数功能: OLED显示一个圆形
  407          // 入口参数: @x：x点  @y：y点  @r:半径
  408          // 函数返回: 无
  409          // 当前版本: VER1.0
  410          // 修改日期: 2023 - 6 - 7
  411          // 当前作者: ZCF
  412          // 其他备注: 写入的是缓存，需要电调用OLED_BuffShow才能显示出来
  413          //========================================================================
  414          void OLED_BuffShowCircle(u8 x, u8 y, u8 r)
  415          {
  416   1          int a, b;
  417   1          int di;
  418   1          a = 0;
  419   1          b = r;
  420   1          di = 3 - (r << 1);       //判断下个点位置的标志
  421   1       
  422   1          while (a <= b)
  423   1          {
  424   2              OLED_BuffShowPoint(x + a, y - b);        //5
*** WARNING C188 IN LINE 424 OF Sources\Task\src\oled.c: 'parameter 1': value truncated
*** WARNING C188 IN LINE 424 OF Sources\Task\src\oled.c: 'parameter 2': value truncated
  425   2              OLED_BuffShowPoint(x + b, y - a);        //0
*** WARNING C188 IN LINE 425 OF Sources\Task\src\oled.c: 'parameter 1': value truncated
*** WARNING C188 IN LINE 425 OF Sources\Task\src\oled.c: 'parameter 2': value truncated
  426   2              OLED_BuffShowPoint(x + b, y + a);        //4
*** WARNING C188 IN LINE 426 OF Sources\Task\src\oled.c: 'parameter 1': value truncated
*** WARNING C188 IN LINE 426 OF Sources\Task\src\oled.c: 'parameter 2': value truncated
  427   2              OLED_BuffShowPoint(x + a, y + b);        //6
*** WARNING C188 IN LINE 427 OF Sources\Task\src\oled.c: 'parameter 1': value truncated
*** WARNING C188 IN LINE 427 OF Sources\Task\src\oled.c: 'parameter 2': value truncated
  428   2              OLED_BuffShowPoint(x - a, y + b);        //1
*** WARNING C188 IN LINE 428 OF Sources\Task\src\oled.c: 'parameter 1': value truncated
*** WARNING C188 IN LINE 428 OF Sources\Task\src\oled.c: 'parameter 2': value truncated
  429   2              OLED_BuffShowPoint(x - b, y + a);
*** WARNING C188 IN LINE 429 OF Sources\Task\src\oled.c: 'parameter 1': value truncated
*** WARNING C188 IN LINE 429 OF Sources\Task\src\oled.c: 'parameter 2': value truncated
  430   2              OLED_BuffShowPoint(x - a, y - b);        //2
*** WARNING C188 IN LINE 430 OF Sources\Task\src\oled.c: 'parameter 1': value truncated
*** WARNING C188 IN LINE 430 OF Sources\Task\src\oled.c: 'parameter 2': value truncated
  431   2              OLED_BuffShowPoint(x - b, y - a);        //7
*** WARNING C188 IN LINE 431 OF Sources\Task\src\oled.c: 'parameter 1': value truncated
*** WARNING C188 IN LINE 431 OF Sources\Task\src\oled.c: 'parameter 2': value truncated
  432   2              a++;
  433   2       
  434   2              //使用Bresenham算法画圆
C251 COMPILER V5.60.0,  oled                                                               07/07/23  15:39:57  PAGE 8   

  435   2              if (di < 0)di += 4 * a + 6;
  436   2              else
  437   2              {
  438   3                  di += 10 + 4 * (a - b);
  439   3                  b--;
  440   3              }
  441   2          }
  442   1      }
  443          
  444          //========================================================================
  445          // 函数名称: OLED_BuffShowChar
  446          // 函数功能: OLED显示一个8*16的字符
  447          // 入口参数: @x：x点  @y：y点  @asc:字符   @mode：0正显  1反显
  448          // 函数返回: 无
  449          // 当前版本: VER1.0
  450          // 修改日期: 2023 - 6 - 7
  451          // 当前作者: ZCF
  452          // 其他备注: 写入的是缓存，需要电调用OLED_BuffShow才能显示出来
  453          //========================================================================
  454          void OLED_BuffShowChar(unsigned char x,unsigned char y,char asc, u8 mode)     //OLED显示一个8*16字符
  455          {
  456   1          unsigned char j,k;
  457   1          for( j=0;j<2;j++ )
  458   1          {
  459   2              for( k=0;k<8;k++ )
  460   2              {
  461   3                  if(mode==0)            
  462   3                      ShowBUFF[j+y][x+k]=Ascll_16[(asc-' ')*2][j*8+k];
  463   3                  else
  464   3                      ShowBUFF[j+y][x+k]=~Ascll_16[(asc-' ')*2][j*8+k];
  465   3              }
  466   2          }    
  467   1      }
  468          void OLED_BuffShowChar68(unsigned char where,unsigned char x,unsigned char y,char asc, u8 mode)     //OLE
             -D显示一个6*8字符
  469          {
  470   1          unsigned char j,k,n;
  471   1          if(where==1)
  472   1          {j=0;n=1;}
  473   1          else if(where==2)
  474   1          {j=1;n=2;}
  475   1          for( ;j<n;j++ )
  476   1          {
  477   2              for( k=0;k<6;k++ )
  478   2              {
  479   3                  if(mode==0)            
  480   3                      ShowBUFF[j+y][x+k]=F6x8[(asc-' ')][k];
  481   3                  else
  482   3                      ShowBUFF[j+y][x+k]=~F6x8[(asc-' ')][k];
  483   3              }
  484   2          }    
  485   1      }
  486          
  487          void OLED_BuffShow68String(unsigned char where,unsigned char x,unsigned char y,char *s,u8 mode)
  488          {
  489   1          char s_num[2];
  490   1        while(*s != '\0')       //字符串不为空，循环
  491   1        {
  492   2          OLED_BuffShowChar68(where,x,y,*s,mode);
  493   2          x+=6;
  494   2          s++;
  495   2          if(x>127)
  496   2          {
  497   3              x=0;
  498   3              y+=2;
  499   3          }
C251 COMPILER V5.60.0,  oled                                                               07/07/23  15:39:57  PAGE 9   

  500   2        }       
  501   1      }
*** WARNING C47 IN LINE 489 OF Sources\Task\src\oled.c: 's_num': unreferenced local variable
  502          
  503          void OLED_BuffShow68Num02F(unsigned char where,u8 x,u8 y,float num,u8 mode)
  504          {
  505   1          u8 xdata str[10];
  506   1          memset(str,0,10);
  507   1          sprintf(str,"%.1f",num);
  508   1          OLED_BuffShow68String(where,x,y,(u8*)str,mode);
  509   1      }
  510          //========================================================================
  511          // 函数名称: OLED_BuffShowGBK
  512          // 函数功能: OLED显示汉字
  513          // 入口参数: @x：x点  @y：y点  @gbk:汉字   @mode：0正显  1反显
  514          // 函数返回: 无
  515          // 当前版本: VER1.0
  516          // 修改日期: 2023 - 6 - 7
  517          // 当前作者: ZCF
  518          // 其他备注: 写入的是缓存，需要电调用OLED_BuffShow才能显示出来
  519          //          用到的汉字需要自己取模放到字库里，字库多的话，这里这个循环变量要放大
  520          //========================================================================
  521          void OLED_BuffShowGBK(unsigned char x,unsigned char y,char *gbk,u8 mode)     //OLED显示一个16*16汉字
  522          {
  523   1          unsigned char i;
  524   1          unsigned char j,k;
  525   1          for( i=0;i<200;i++ )
  526   1          {
  527   2              if(( gbk[0]== GBK16[i].gbn_bum[0] )&&( gbk[1]== GBK16[i].gbn_bum[1] ))
  528   2              {
  529   3                  for( j=0;j<2;j++ )
  530   3                  {
  531   4                      for( k=0;k<16;k++ )
  532   4                      {
  533   5                          if( mode ==0 )
  534   5                              ShowBUFF[j+y][x+k]=GBK16[i].gbk_font[j*16+k];
  535   5                          else
  536   5                              ShowBUFF[j+y][x+k]=~GBK16[i].gbk_font[j*16+k];
  537   5                      }
  538   4                  }
  539   3                  break;
  540   3              }
  541   2          }    
  542   1      }
  543          
  544          //========================================================================
  545          // 函数名称: OLED_BuffShowString
  546          // 函数功能: OLED显示字符串。汉字字符均可
  547          // 入口参数: @x：x点  @y：y点  @s字符串   @mode：0正显  1反显
  548          // 函数返回: 无
  549          // 当前版本: VER1.0
  550          // 修改日期: 2023 - 6 - 7
  551          // 当前作者: ZCF
  552          // 其他备注: 写入的是缓存，需要电调用OLED_BuffShow才能显示出来
  553          //          用到的汉字需要自己取模放到字库里，字库多的话，这里这个循环变量要放大
  554          //========================================================================
  555          
  556          void OLED_BuffShowBigString(unsigned char x,unsigned char y,char *s,u8 mode)
  557          {
  558   1        char s_num[2];
  559   1        while(*s != '\0')       //字符串不为空，循环
  560   1        {
  561   2          s_num[0] = *s ;
  562   2          s_num[1] = *(s+1) ;
  563   2          OLED_BuffShowGBK(x,y,s_num,mode);
  564   2          x+=16;
C251 COMPILER V5.60.0,  oled                                                               07/07/23  15:39:57  PAGE 10  

  565   2          s+=2;
  566   2          if(x>127)
  567   2          {
  568   3              x=0;
  569   3              y+=2;
  570   3          }
  571   2        }
  572   1      }
  573          
  574          void OLED_BuffShowString(unsigned char x,unsigned char y,char *s,u8 mode)
  575          {
  576   1          char s_num[2];
  577   1        while(*s != '\0')       //字符串不为空，循环
  578   1        {
  579   2              if ((unsigned char)*s < 0x80)     //根据输入数据的大小判断是字符还是汉字，
  580   2              {
  581   3                  OLED_BuffShowChar(x,y,*s,mode);
  582   3                  x+=8;
  583   3                  s++;
  584   3              }
  585   2              else
  586   2              {
  587   3                  s_num[0] = *s ;
  588   3                  s_num[1] = *(s+1) ;
  589   3                  OLED_BuffShowGBK(x,y,s_num,mode);
  590   3                  x+=16;
  591   3                  s+=2;
  592   3              }
  593   2          if(x>127)
  594   2              {
  595   3                  x=0;
  596   3                  y+=2;
  597   3              }
  598   2        }       
  599   1      }
  600          
  601          //========================================================================
  602          // 函数名称: OLED_BuffShowNum
  603          // 函数功能: OLED显示整形变量
  604          // 入口参数: @x：x点  @y：y点  @num：整形变量   @mode：0正显  1反显
  605          // 函数返回: 无
  606          // 当前版本: VER1.0
  607          // 修改日期: 2023 - 6 - 7
  608          // 当前作者: ZCF
  609          // 其他备注: 写入的是缓存，需要电调用OLED_BuffShow才能显示出来
  610          //========================================================================
  611          void OLED_BuffShowNum(u8 x,u8 y,long num,u8 mode)
  612          {
  613   1          u8 xdata str[10];
  614   1          memset(str,0,10);
  615   1          sprintf(str,"%ld",num);
  616   1          OLED_BuffShowString(x,y,(u8*)str);
*** WARNING C96 IN LINE 616 OF Sources\Task\src\oled.c: 'OLED_BuffShowString': too few actual parameters
  617   1      }
*** WARNING C47 IN LINE 611 OF Sources\Task\src\oled.c: 'mode': unreferenced parameter
  618          
  619          //========================================================================
  620          // 函数名称: OLED_BuffShowNum02F
  621          // 函数功能: OLED显示一个两位小数变量
  622          // 入口参数: @x：x点  @y：y点  @num：小数变量   @mode：0正显  1反显
  623          // 函数返回: 无
  624          // 当前版本: VER1.0
  625          // 修改日期: 2023 - 6 - 7
  626          // 当前作者: ZCF
  627          // 其他备注: 写入的是缓存，需要电调用OLED_BuffShow才能显示出来
  628          //========================================================================
C251 COMPILER V5.60.0,  oled                                                               07/07/23  15:39:57  PAGE 11  

  629          void OLED_BuffShowNum02F(u8 x,u8 y,float num,u8 mode)
  630          {
  631   1          u8 xdata str[10];
  632   1          memset(str,0,10);
  633   1          sprintf(str,"%.2f",num);
  634   1          OLED_BuffShowString(x,y,(u8*)str,mode);
  635   1      }
  636          
  637          //========================================================================
  638          // 函数名称: OLED_BuffShowChar32
  639          // 函数功能: OLED显示16*32的字符
  640          // 入口参数: @x：x点  @y：y点  @num：显示第几个字符   @mode：0正显  1反显
  641          // 函数返回: 无
  642          // 当前版本: VER1.0
  643          // 修改日期: 2023 - 6 - 7
  644          // 当前作者: ZCF
  645          // 其他备注: 写入的是缓存，需要电调用OLED_BuffShow才能显示出来
  646          //          用到的需要自己取模哦
  647          //========================================================================
  648          void OLED_BuffShowChar32(unsigned char  x,unsigned char  y,u8 num, u8 mode)     
  649          {
  650   1          unsigned char j,k;
  651   1          for( j=0;j<4;j++ )
  652   1          {
  653   2              for( k=0;k<16;k++ )
  654   2              {
  655   3                  if( mode==0 )
  656   3                      ShowBUFF[j+y][x+k]=lib_num1632[num][j*16+k];
  657   3                  else
  658   3                      ShowBUFF[j+y][x+k]=~lib_num1632[num][j*16+k];
  659   3              }
  660   2          }            
  661   1      }
  662          
  663          
  664          //========================================================================
  665          // 函数名称: OLED_BuffShowBMP
  666          // 函数功能: OLED缓存写入图片
  667          // 入口参数: @x0:x起点  @y0:y起点    @x1:x终点   @y1:y终点  @BMP：显示数组
  668          // 函数返回: 无
  669          // 当前版本: VER1.0
  670          // 修改日期: 2023 - 6 - 7
  671          // 当前作者: ZCF
  672          // 其他备注:
  673          //========================================================================
  674          void OLED_BuffShowBMP(unsigned char x0, unsigned char y0,unsigned char x1, unsigned char y1,unsigned char
             - BMP[])
  675          {   
  676   1          unsigned int xdata num=0;
  677   1          u8 k,j;
  678   1          
  679   1          for( j=0;j<y1;j++ )
  680   1          {
  681   2              for( k=0;k<x1;k++ )
  682   2              {
  683   3                  ShowBUFF[j+y0][x0+k]=BMP[num++];
  684   3              }
  685   2          }  
  686   1      } 
  687           


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      8661     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
C251 COMPILER V5.60.0,  oled                                                               07/07/23  15:39:57  PAGE 12  

  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =      1024         33
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        93     ------
End of Module Information.


C251 COMPILATION COMPLETE.  20 WARNING(S),  0 ERROR(S)
